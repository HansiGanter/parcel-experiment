{"dependencies":[{"name":"/Users/hansi/workdir/parcel-experiment/package.json","includedInParent":true,"mtime":1690295309730},{"name":"/Users/hansi/workdir/parcel-experiment/node_modules/date-fns/esm/isFuture/package.json","includedInParent":true,"mtime":1690293552595},{"name":"../toDate/index.js","loc":{"line":1,"column":19}},{"name":"../_lib/requiredArgs/index.js","loc":{"line":2,"column":25}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isFuture;\n\nvar _index = require(\"../toDate/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _index3 = require(\"../_lib/requiredArgs/index.js\");\n\nvar _index4 = _interopRequireDefault(_index3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name isFuture\n * @category Common Helpers\n * @summary Is the given date in the future?\n * @pure false\n *\n * @description\n * Is the given date in the future?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in the future\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 31 December 2014 in the future?\n * const result = isFuture(new Date(2014, 11, 31))\n * //=> true\n */\nfunction isFuture(dirtyDate) {\n  (0, _index4.default)(1, arguments);\n  return (0, _index2.default)(dirtyDate).getTime() > Date.now();\n}","map":{"mappings":[{"name":"isFuture","generated":{"line":6,"column":18},"source":"node_modules/date-fns/esm/isFuture/index.js","original":{"line":24,"column":24}},{"generated":{"line":8,"column":0},"source":"node_modules/date-fns/esm/isFuture/index.js","original":{"line":1,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/date-fns/esm/isFuture/index.js","original":{"line":2,"column":0}},{"generated":{"line":18,"column":0},"source":"node_modules/date-fns/esm/isFuture/index.js","original":{"line":3,"column":0}},{"generated":{"line":39,"column":0},"source":"node_modules/date-fns/esm/isFuture/index.js","original":{"line":24,"column":15}},{"name":"isFuture","generated":{"line":39,"column":9},"source":"node_modules/date-fns/esm/isFuture/index.js","original":{"line":24,"column":24}},{"generated":{"line":39,"column":17},"source":"node_modules/date-fns/esm/isFuture/index.js","original":{"line":24,"column":15}},{"name":"dirtyDate","generated":{"line":39,"column":18},"source":"node_modules/date-fns/esm/isFuture/index.js","original":{"line":24,"column":33}},{"generated":{"line":39,"column":27},"source":"node_modules/date-fns/esm/isFuture/index.js","original":{"line":24,"column":15}},{"generated":{"line":39,"column":29},"source":"node_modules/date-fns/esm/isFuture/index.js","original":{"line":24,"column":44}},{"generated":{"line":40,"column":0},"source":"node_modules/date-fns/esm/isFuture/index.js","original":{"line":25,"column":2}},{"generated":{"line":40,"column":23},"source":"node_modules/date-fns/esm/isFuture/index.js","original":{"line":25,"column":15}},{"generated":{"line":40,"column":24},"source":"node_modules/date-fns/esm/isFuture/index.js","original":{"line":25,"column":2}},{"name":"arguments","generated":{"line":40,"column":26},"source":"node_modules/date-fns/esm/isFuture/index.js","original":{"line":25,"column":18}},{"generated":{"line":40,"column":35},"source":"node_modules/date-fns/esm/isFuture/index.js","original":{"line":25,"column":2}},{"generated":{"line":41,"column":0},"source":"node_modules/date-fns/esm/isFuture/index.js","original":{"line":26,"column":2}},{"generated":{"line":41,"column":9},"source":"node_modules/date-fns/esm/isFuture/index.js","original":{"line":26,"column":9}},{"name":"dirtyDate","generated":{"line":41,"column":30},"source":"node_modules/date-fns/esm/isFuture/index.js","original":{"line":26,"column":16}},{"generated":{"line":41,"column":39},"source":"node_modules/date-fns/esm/isFuture/index.js","original":{"line":26,"column":9}},{"name":"getTime","generated":{"line":41,"column":41},"source":"node_modules/date-fns/esm/isFuture/index.js","original":{"line":26,"column":27}},{"generated":{"line":41,"column":48},"source":"node_modules/date-fns/esm/isFuture/index.js","original":{"line":26,"column":9}},{"name":"Date","generated":{"line":41,"column":53},"source":"node_modules/date-fns/esm/isFuture/index.js","original":{"line":26,"column":39}},{"name":"now","generated":{"line":41,"column":58},"source":"node_modules/date-fns/esm/isFuture/index.js","original":{"line":26,"column":44}},{"generated":{"line":41,"column":61},"source":"node_modules/date-fns/esm/isFuture/index.js","original":{"line":26,"column":39}},{"generated":{"line":41,"column":63},"source":"node_modules/date-fns/esm/isFuture/index.js","original":{"line":26,"column":2}},{"generated":{"line":42,"column":0},"source":"node_modules/date-fns/esm/isFuture/index.js","original":{"line":27,"column":1}}],"sources":{"node_modules/date-fns/esm/isFuture/index.js":"import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isFuture\n * @category Common Helpers\n * @summary Is the given date in the future?\n * @pure false\n *\n * @description\n * Is the given date in the future?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in the future\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 31 December 2014 in the future?\n * const result = isFuture(new Date(2014, 11, 31))\n * //=> true\n */\nexport default function isFuture(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getTime() > Date.now();\n}"},"lineCount":null}},"hash":"4c9271411a33ff75df675b977539ffe0","cacheData":{"env":{}}}